package module_1.week_1;

public class Lab_1_1_2 {
    public static void main(String[] args) {
        // Тип byte (имеет размер в 8 бит)
        // Является наименьшим из целочисленных.
        // 8-разрядный тип данных c диапазоном значений  от -2^7 до 2^7-1.
        // Или простыми словами, может хранить значения от -128 до 127.
        // Используется для работы с потоками ввода-вывода данных.
        System.out.println("byte size: " + Byte.SIZE);
        System.out.println("byte min: " + Byte.MIN_VALUE);
        System.out.println("byte max: " + Byte.MAX_VALUE + "\n");

        // Тип short (имеет размер в 16 бит)
        // 16-разрядный тип данных в диапазоне от -2^15 до 2^15-1.
        // Может хранить значения от -32768 до 32767.
        // Самый редко применяемый тип данных.
        System.out.println("short size: " + Short.SIZE);
        System.out.println("short min: " + Short.MIN_VALUE);
        System.out.println("short max: " + Short.MAX_VALUE + "\n");

        // Тип int (имеет размер в 32 бит)
        // Наиболее часто употребляемый тип данных.
        // Содержит 32 разряда и помещает числа в диапазоне от -2^31 до 2^31-1.
        // Другими словами, может хранить значения от -2147483648 до 2147483647.
        System.out.println("int size: " + Integer.SIZE);
        System.out.println("int min: " + Integer.MIN_VALUE);
        System.out.println("int max: " + Integer.MAX_VALUE + "\n");

        // Тип long (имеет размер в 64 бит)
        // 64-разрядный целочисленный тип данных с диапазоном от -2^63 до 2^63-1.
        // Может хранить значения от -9223372036854775808 до 9223372036854775807.
        // Удобен при работе с большими целыми числами.
        System.out.println("long size: " + Long.SIZE);
        System.out.println("long min: " + Long.MIN_VALUE);
        System.out.println("long max: " + Long.MAX_VALUE + "\n");

        // Тип double (имеет размер в 64 бит)
        // На хранение требуется 64 бита.
        // Рационально пользоваться double,
        // когда нужно сохранить точность многократно повторяющихся вычислений или манипулировать большими числами.
        System.out.println("double size: " + Double.SIZE);
        System.out.println("double min: " + Double.MIN_VALUE);
        System.out.println("double max: " + Double.MAX_VALUE + "\n");

        // Тип float (имеет размер в 32 бит)
        // 32-разрядный тип данных с плавающей точкой.
        // Требует в два раза меньше памяти и в некоторых процессорах выполняется быстрее, по сравнению с double.
        // Но если значения слишком велики или слишком малы, то не обеспечивает требуемую точность вычислений.
        // Используется когда нужно число с дробной частью, но без особой точности.
        System.out.println("float size: " + Float.SIZE);
        System.out.println("float min: " + Float.MIN_VALUE);
        System.out.println("float max: " + Float.MAX_VALUE + "\n");

        // Тип char используется для отображения отдельных символов
        System.out.println("char size: " + Character.SIZE);
    }
}

// Дополнение, почему именно такие диапазоны чисел
// За основу взят тип byte
// У него диапазон от -128 до 127

// Байт состоит из 8 бит.
// 00000000 означает 0
// 11111111 означает 255
// Мы не можем различать, является ли число положительным или отрицательным.
// По этой причине бит с левой стороны дает нам эту информацию.
// Если бит на левой стороне равен 0,
// вы можете начать добавлять значение других бит в верхней части нуля.
// Если бит равен 1, вы должны начать добавлять от -128.

// Пример
// В этих примерах бит с левой стороны равен 1, это означает, что мы добавляем значения других бит в верхней части -128.
// 10000000 = -128 (-128 + 0)
// 10000001 = -127 (-128 + 1)
// 10000011 = -125 (-128 + 3)
// 10000111 = -121 (-128 + 7)
// Одинаковые байты, но на этот раз бит слева равен 0. Это означает, что мы начинаем добавлять в начало 0.

// 00000000 = 0 (0 + 0)
// 00000001 = 1 (0 + 1)
// 00000011 = 3 (0 + 3)
// 00000111 = 7 (0 + 7)
// Если мы до сих пор в порядке, наименьшее возможное число с 8 битами с этим правилом:
// 10000000 = -128
// наибольшее возможное количество
// 011111111 = 127
// Вот почему диапазон находится между -128 и 127.
